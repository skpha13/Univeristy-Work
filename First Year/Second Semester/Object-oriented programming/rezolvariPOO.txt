1 - f e ambiguu
2 - nu s-a declarat valoarea lui x, care e static
3 - 6 21 3
4 - nu merge mister2 prin adresa
5 - 7 7 7 
6 - 6
7 - private inheritance ?
8 - nu putem face ob.x
9 - 1131
10 - 0 ?
11 - no match for 'operator<<'
12 - no matching consructor, cls(int i) -> cls(int i=0)
13 - Numarul -2 e bun/Numarul 2 nu e bun
14 - no matching constructor
15 - 5 6 7 ... 18 19
16 - -12
17 - -11
18 - 0x2738e9918f4
19 - -17
20 - liniile 31-33 trebuie sterse
21 - -15
22 - i is private member of B
23 - no member named 'f1' in 'B', facem functia f1 in B virtuala, sau dynamic_cast
24 - f este ambiguu
25 - undefined reference to x, adaugam int A::x = 0 => 0
26 - -12
27 - o iese din scope
28 - void mister2(problema& o) -> void mister2(problema o)
29 - 7 7 7 
30 - 6
31 - upcast nu merge cu private inheritance
32 - trebuie getter pt x la linia 17
33 - 1131
34 - 0
35 - no match for 'operator<<' -> (a1 + a2).operator<< <A>(cout);
36 - cls(int i) -> cls(int i=0)
37 - 7
38 - nu poti aduna 2 pointeri, punem *x la functia template
39 - test(a,b) este ambiguu, daca eliminam test(int &c,int &d), va afisa   test 2 test 3
40 - 5
41 - merge
42 - 'o' was not declared in this scope
43 - c1 c2 c1 c2 c1 c3 d3 d1 d2 d1 d2 d1
44 - 1
45 - binding reference of type 'int&' to 'const int' discards qualifiers, adaugam const int& f() const {return x;}, nu avem voie sa modificam c-ul pentru ca avem functie const, dar noi returnam adresa lui c non-const, ceea ce strica constness-ul, deci ori scoate const ori il adaugam ca si tip de returnare
46 - No viable overloaded '=', functia minus trebuie sa returneze obiect de tip D ca sa mearga
47 - returneaza adresa catre un obiect sters dupa terminarea functiei -> eroare run-time, stergem & de la linia 21
48 - get_x e private, facem public inheritance
49 - 1500
50 - B D D2 MM 7 7 7 
51 - 1
52 - static int get_x() {} -> 11bbbbbbbbbb3b1 nu apare si D ca nu e virtual destructorul
53 - cls(int i) -> cls(int i=0) => 0123456789
56 - analog 47
57 - 0 0
58 - analog 57
59 - 'x' is a private member of 'B' -> facem x protected -> 0
60 - 200
61 - x=20, y=22
62 - analog 61
63 - obiect const, dar functia e non-const
64 - 0
65 - 9 8 7 6 5 4 3 2 1 0
67 - linia 22 -> x e private member
68 - mutam cls2 inainte cls1 -> 30 20, merge pentru ca cls1 are copy constructor cu parametru cls2, daca am pune la f cls1& p nu ar mai functiona pentru r
70 - 28
71 - 14 aici merge ca avem returnare de ob static care nu se sterge la finalizarea functiei
73 - comentam linia 8 -> 41
74 - ?
75 - 2030
76 - functia nu e const -> 15
77 - 1
79 - linia 29 -> int& operator[](int i) const { return y[i]; } -> 11111
80 - il facem pe x protected -> -5
81 - 
82 - 
83 - 
84 - 
85 - 
86 - 
87 - 
88 - 
89 - 
90 - 
91 - 
92 - 
93 - 
94 - 
95 - 
96 - 
97 - 
98 - 
99 - 
100 - 
101 - 
102 - 
103 - 
104 - 
105 - 
106 - 
107 - 
108 - 
109 - 
110 - 
111 - 
112 - 