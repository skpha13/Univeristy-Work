#include <iostream>
using namespace std;

class Produs
{
protected:
    string nume;
    float pretBrut;
public:
    Produs();
    Produs(string nume, float pretBrut);
    Produs& operator=(const Produs& p);
    Produs(const Produs&);

    friend istream& operator>>(istream& in, Produs& p);
    friend ostream& operator<<(ostream& out, const Produs& p);

    string getNume(){return this->nume;}
    virtual float calculeazaPret()=0;
};


Produs::Produs()
{
    this->nume="Anonim";
    this->pretBrut=0;
}

Produs::Produs(string nume, float pretBrut)
{
    this->nume=nume;
    this->pretBrut=pretBrut;
}

Produs& Produs::operator=(const Produs& p)
{
    if(this!=&p)
    {
        this->nume=p.nume;
        this->pretBrut=p.pretBrut;
    }
    return *this;
}

Produs::Produs(const Produs& p)
{
    this->nume=p.nume;
    this->pretBrut=p.pretBrut;
}

istream& operator>>(istream& in, Produs& p)
{
    cout<<"Dati numele produsului: ";
    in>>p.nume;
    cout<<"Dati pretul brut al produsului: ";
    in>>p.pretBrut;
    return in;
}

ostream& operator<<(ostream& out, const Produs& p)
{
    out<<"Numele produsului este: "<<p.nume<<"\n";
    out<<"Pretul brut al produsului este: "<<p.pretBrut<<"\n";
    return out;
}

class ProdusPerisabil:public Produs
{
private:
    string dataExp;
public:
    ProdusPerisabil();
    ProdusPerisabil(string nume, float pretBrut, string dataExp);
    ProdusPerisabil(string dataExp);
//    ProdusPerisabil(Produs p, string dataExp);
    ProdusPerisabil& operator=(const ProdusPerisabil& p);
    ProdusPerisabil(const ProdusPerisabil&);
    friend istream& operator>>(istream& in, ProdusPerisabil& p);
    friend ostream& operator<<(ostream& out, const ProdusPerisabil &p);

    float calculeazaPret(){  return (float) 25/100*this->pretBrut+this->pretBrut;}

};
/*
ProdusPerisabil::ProdusPerisabil(Produs p, string dataExp):Produs(p){

    this->dataExp=dataExp;

}
*/


ProdusPerisabil::ProdusPerisabil():Produs()
{
    this->dataExp="Data";
}
ProdusPerisabil::ProdusPerisabil(string dataExp):Produs(){

    this->dataExp=dataExp;

}

ProdusPerisabil::ProdusPerisabil(string nume, float pretBrut, string dataExp):Produs(nume,pretBrut)
{

    this->dataExp=dataExp;
}

ProdusPerisabil& ProdusPerisabil:: operator=(const ProdusPerisabil& p)
{
    if(this!=&p)
    {
        Produs::operator=(p);
        this->dataExp=p.dataExp;
    }
    return *this;
}

ProdusPerisabil::ProdusPerisabil(const ProdusPerisabil& p):Produs(p)
{

    this->dataExp=p.dataExp;
}


istream& operator>>(istream& in, ProdusPerisabil& p)
{
    in>>(Produs&)p;
    cout<<"Data expirarii: ";
    in>>p.dataExp;
    return in;
}

ostream& operator<<(ostream& out, const ProdusPerisabil& p)
{
    out<<(Produs&)p;
    out<<"Data expirarii: "<<p.dataExp<<".\n";
    return out;
}


class ProdusNeperisabil:public Produs
{
private:
    int aniGarantie;
public:
    ProdusNeperisabil();
    ProdusNeperisabil(string nume, float pretBrut,  int aniGarantie);
    ProdusNeperisabil& operator=(const ProdusNeperisabil& );
    ProdusNeperisabil(const ProdusNeperisabil& p);
    friend istream& operator>>(istream& in, ProdusNeperisabil& p);
    friend ostream& operator<<(ostream& out, const  ProdusNeperisabil& p);



    float calculeazaPret(){  return (float) 10/100*this->pretBrut+this->pretBrut;}

};


ProdusNeperisabil::ProdusNeperisabil():Produs()
{
    this->aniGarantie=0;
}

ProdusNeperisabil::ProdusNeperisabil(string nume, float pretBrut, int aniGarantie):Produs(nume,pretBrut)
{
    this->aniGarantie=aniGarantie;
}

ProdusNeperisabil& ProdusNeperisabil:: operator=(const ProdusNeperisabil& p)
{
    if(this!=&p)
    {
        Produs::operator=(p);
        this->aniGarantie=p.aniGarantie;
    }
    return *this;
}




ProdusNeperisabil::ProdusNeperisabil(const ProdusNeperisabil& p):Produs(p)
{
    this->aniGarantie=p.aniGarantie;
}


istream& operator>>(istream& in, ProdusNeperisabil& p)
{
    in>>(Produs&)p;
    cout<<"Dati anii de garantie ai produsului: ";
    in>>p.aniGarantie;
    return in;
}

ostream& operator<<(ostream& out, const ProdusNeperisabil& p)
{
    out<<(Produs&)p;
    out<<"Acest produs are "<<p.aniGarantie<<" ani garantie.\n";
    return out;
}


int main()
{
    Produs* listaProduse[100];
    int i=0;
    int k=1;
    while(k==1){
        cout<<"\n 1 Pentru a adauga un produs perisabil";
        cout<<"\n 2 Pentru a adauga un produs neperisabil";
        cout<<"\n 3 Pentru a afisa produsele";
        cout<<"\n 5 Pentru a afisa preturile finale ale produselor din stock";
        cout<<"\n 4 Stop";
        int comanda;
        cin>>comanda;
        switch(comanda){

        case 1:{
            listaProduse[i]=new ProdusPerisabil();
            cin>> static_cast<ProdusPerisabil&>(*listaProduse[i]);
            i++;
        break;
        }
        case 2:{
            listaProduse[i]=new ProdusNeperisabil();
            cin>> static_cast<ProdusNeperisabil&>(*listaProduse[i]);
            i++;
        break;
        }
        case 3:{

            for(int j=0; j<i;j++)
               {
                   if((typeid(*listaProduse[j]))== typeid(ProdusPerisabil))
                    cout<<static_cast<ProdusPerisabil&>(*listaProduse[j])<<endl;
                   else
                    cout<<static_cast<ProdusNeperisabil&>(*listaProduse[j]);
               }
         break;

        }
        case 4: {
            k=0;
            break;

        }
        case 5:{

       for(int j=0; j<i;j++)
                cout<<"\nProdusul: "<<listaProduse[j]->getNume()<<" are pretul: "<<listaProduse[j]->calculeazaPret()<<" ";
        break;
        }





        }




    }

/*


    Produs* a;
    a=new ProdusNeperisabil();
    (static_cast<ProdusNeperisabil&>(*a)).RepGarantie();

*/


    return 0;
}
